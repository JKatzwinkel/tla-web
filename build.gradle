plugins {
    id 'war'
    id 'java'
    id 'jacoco'
    id 'application'
    id 'maven-publish'
    id 'co.uzzu.dotenv.gradle' version '2.0.0'
    id 'de.undercouch.download' version '5.4.0'
    id 'org.springframework.boot' version '3.1.0'
    id 'com.github.ben-manes.versions' version '0.47.0'
    id 'com.github.dawnwords.jacoco.badge' version '0.2.4'
}

group = 'org.bbaw.aaew.tla'
version = '0.0.827-dev'
sourceCompatibility = '17'

ext {
    fontawesomeVersion = env.FONTAWESOME_VERSION.orElse('5.12.1')
    bootstrapVersion = env.BOOTSTRAP_VERSION.orElse('4.6.0')
    jqueryVersion = env.JQUERY_VERSION.orElse('3.6.4')
    cookieJsVersion = env.COOKIEJS_VERSION.orElse('2.2.1')
    cookieBannerVersion = env.COOKIE_BANNER_VERSION.orElse('1.2.2')
    fontawesomeSrc = "https://use.fontawesome.com/releases/v${fontawesomeVersion}/fontawesome-free-${fontawesomeVersion}-web.zip"
    bootstrapSrc = "https://github.com/twbs/bootstrap/releases/download/v${bootstrapVersion}/bootstrap-${bootstrapVersion}-dist.zip"
    jquerySrc = "https://code.jquery.com/jquery-${jqueryVersion}.min.js"
    cookieJsSrc = "https://github.com/js-cookie/js-cookie/releases/download/v${cookieJsVersion}/js.cookie-${cookieJsVersion}.min.js"
    cookieBannerSrc = "https://cdn.jsdelivr.net/gh/dobarkod/cookie-banner@${cookieBannerVersion}/dist/cookiebanner.min.js"
    staticDir = 'src/main/resources/static'
    vendorDir = "${staticDir}/vendor"
}

def assets = [
  'cookieJs': [cookieJsSrc, 'js.cookie.min.js'],
  'cookieBanner': [cookieBannerSrc, 'cookiebanner.min.js'],
  'jquery': [jquerySrc, 'jquery.min.js'],
  'headroomJs': ['https://unpkg.com/headroom.js@0.12.0/dist/headroom.min.js', 'headroom.min.js']
]

def frameworks = [
  'bootstrap': [bootstrapSrc, "${staticDir}/vendor/bootstrap-${bootstrapVersion}-dist"],
  'fontawesome': [fontawesomeSrc, "${staticDir}/vendor/fontawesome-free-${fontawesomeVersion}-web"]
]

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'tla-web'
            pom {
                name = 'TLA Web Frontend'
                description = 'HTML frontend for the Thesaurus Linguae Aegyptiae web component'
            }
            from components.java
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    testCompileOnly 'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'

    implementation 'org.modelmapper:modelmapper:3.1.1'
    implementation 'org.jooq:jool:0.9.15'

    // https://github.com/spring-projects/spring-framework/issues/29435
    implementation('jakarta.servlet:jakarta.servlet-api:5.0.0')
    implementation('org.springframework.boot:spring-boot-starter-jetty:3.1.0') {
        exclude group: 'jakarta.servlet', module: 'jakarta.servlet-api' // until jetty 12
        exclude module: 'jetty-xml'
    }
    implementation('org.springframework.boot:spring-boot-starter-web:3.1.0') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:3.1.0'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.2.1'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    implementation 'com.github.jkatzwinkel:tla-common:main-SNAPSHOT'
    implementation('com.github.rosmord.jsesh:jsesh:release-7.6.1') {
        exclude group: 'com.jgoodies', module: 'forms'
        exclude group: 'bouncycastle'
    }

    testImplementation('jakarta.servlet:jakarta.servlet-api:6.0.0')
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0-M1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0-M1'
}

task installAssets {
    description = 'Download and install third-party JS/CSS frameworks and libraries'
    dependsOn 'installFontRoboto'
    outputs.files(
        file("${vendorDir}/")
    )
}

task updateAssets {
    group = 'Init'
    description = 'Removes and re-installs third-party ressources added with :installAssets.'
    dependsOn 'cleanAssets'
    dependsOn 'installAssets'
}

def createDownloadAssetTask(String name, String url, String destFile) {
  return tasks.create("download${name.capitalize()}", Download) {
    doFirst {
      mkdir "${staticDir}/vendor"
    }
    description = "Download && install ${name}"
    src "${url}"
    dest file("${staticDir}/vendor/${destFile}")
    onlyIfModified true
  }
}

assets.each {
    var task = createDownloadAssetTask(
      it.key, it.value[0], it.value[1]
    )
    installAssets.dependsOn task
    processResources.mustRunAfter task
}

frameworks.each {
    var task = createInstallFrameworkTask(
      it.key, it.value[0], it.value[1]
    )
    installAssets.dependsOn task
    processResources.mustRunAfter task
}

task downloadFontRoboto(type: Download) {
    group = 'Init'
    description = 'Download Google Roboto font'
    src 'https://gwfh.mranftl.com/api/fonts/roboto?download=zip&subsets=latin&variants=300,500,700,300italic,regular,italic,700italic&formats=woff2'
    dest new File(buildDir, 'roboto.zip')
    onlyIfModified true
}

def downloadFrameworkTask(String name, String url) {
    return tasks.create("download${name.capitalize()}", Download) {
      description = "Downloads ${name.capitalize()} distrubution into build directory."
      src "${url}"
      dest new File(buildDir, "${name}.zip")
      onlyIfModified true
      outputs.files(
        new File(buildDir, "${name}.zip")
      )
    }
}

def createInstallFrameworkTask(String name, String url, String dir) {
    return tasks.create("install${name.capitalize()}", Copy) {
      inputs.files(
        new File(buildDir, "${name}.zip")
      )
      group = 'Init'
      description = "Installs ${name.capitalize()} distribution into assets directory."
      dependsOn downloadFrameworkTask(name, url)
      doFirst {
        mkdir "${vendorDir}"
      }
      if (!file("${vendorDir}/${name}").exists()) {
        from zipTree(
          new File(buildDir, "${name}.zip")
        )
        into file("${vendorDir}")
        doLast {
            file("${dir}").renameTo(
              file("${vendorDir}/${name}")
            )
        }
      }
      outputs.files(
        file("${vendorDir}/${name}")
      )
    }
}

task installFontRoboto(dependsOn: downloadFontRoboto, type: Copy) {
    group = 'Init'
    description = 'Installs Google Roboto font'
    from zipTree(downloadFontRoboto.dest)
    into file("${staticDir}/font")
}

def checkStylesheetFileReference(String styleSheet, String ref) {
    if (!new File(staticDir, ref).exists()) {
        println """    \
            file ${ref} referenced in CSS stylesheet could not be found. Actual contents of fonts dir:
        """.stripIndent()
        file("${staticDir}/font/").eachFile {
            file -> println " ${file.name}"
        }
        throw new GradleException(
            """\
            @font-face src out of date: CSS file ${styleSheet} points to missing resource ${staticDir}/${ref}!
            Fix the issue by updating this reference before running again!
            """.stripIndent()
        )
    }
}

task validateWebFontImports() {
    dependsOn 'installFontRoboto'
    group = 'Init'
    description = 'Check stylesheet loading font files for dead references'
    doFirst {
        def stylesheet = 'src/main/resources/static/css/roboto.css'
        (
            file(stylesheet).text =~ /font\/\S*\.(eot|woff2?|ttf|svg)/
        ).findAll()*.first().each {
            ref -> checkStylesheetFileReference(stylesheet, ref)
        }
    }
}

task install {
    inputs.files(
      file('.env')
    )
    group = 'Init'
    description = 'Installs additional resources required for running the app'
    dependsOn 'installAssets'
    outputs.files(
      file("${staticDir}/vendor/")
    )
    finalizedBy 'validateWebFontImports'
}

task cleanAssets(type: Delete) {
    group = 'Init'
    description = 'Delete files added with :installAssets'
    dependsOn 'cleanInstallAssets'
    frameworks.each {
      entry -> cleanAssets.dependsOn "cleanDownload${entry.key.capitalize()}"
    }
    delete "${staticDir}/vendor/"
    delete fileTree("${staticDir}/font") {
        include "roboto*"
    }
}

clean {
    dependsOn 'cleanInstall'
}

processResources {
    mustRunAfter 'installFontRoboto'
    mustRunAfter 'installAssets'
}

springBoot {
    buildInfo()
}

bootJar {
    dependsOn 'install'
}

def installationReminder() {
  if ( !file("${staticDir}/vendor/").exists() ) {
    println ' ======================================'
    println ' !!!  Must run task :install first: !!!'
    println ' !!!                                !!!'
    println ' !!!     ./gradlew.bat install      !!!'
    println ' ======================================'
    throw new StopExecutionException()
  }
}


bootRun {
    systemProperty 'spring.profiles.active', 'dev'
    doFirst {
      installationReminder()
    }
}

application {
    mainClass = 'tla.web.App'
}

test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
    finalizedBy 'generateJacocoBadge'
}

